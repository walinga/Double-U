;
;; DOUBLE-U EXAMPLE FILE
;

;; Literal variable definition
let x = [1 2 3]
let k = 88

;; We can also define variables with output from functions
let y = shuffle! [4 5 6]
let z = select! x

;; Print stuff to std out
print select! y
print y  
print z
     
let a = mean! x ; Inline comments are possible as well
let b = remove! x
print a
print b

;; Brackets can (optionally) be used to improve readability
let c = mean! (remove! [1 3 9])
print c

let d = []
print ( mean! d )

;; The only restriction on variable names is the regex /\w+/
let shuffle = shuffle! (shuffle! [1 2 3])
print shuffle! shuffle

let 0x_17 = 23
print 0x_17

;; Merge can be used to add arrays or ints
let g = merge x y  ; x and y are arrays
let h = merge a b  ; a and b are ints

;;
;; Functions and their uses
;;

;; Mean, Median, and Mode are typical stats functions
;; Note: Mode is non-determinstic when there are multiple
;;  values with the highest frequency
print median! [1 2 3]     ; middle element
print mean! [1 2 3 4]     ; sum / length
print mode! [7 6 7 6 1 3] ; highest frequency element

;; These functions will return one of Mean/Median/Mode
;; GMDL calls 'average' some number of times
print average! [13 18 13 14 13 16 14 21 13]
print GMDL! [1 1 1 1 1 1624 2 13]

;; Classic list functions
print shuffle! [1 2 3 4]  ; mixes up the array
print select! [1 2 3]     ; returns one of the elements
print remove! [1 2 3 4 5] ; takes out one of the elements
print subset! [1 2 3 4]   ; gives a random subset of the array

;; More stats functions
print variance! [1 0 1] ; Equally weighted sample variance
print std! [1 0 1]      ; Square root of the variance
print range! [1 2 3 10] ; Max - Min
print iqr! [1 2 3 10]   ; Interquartile Range (less biased)

;; "Cool" stats functions
print normalize! [1 2 3]   ; array of standard scores of the elements
print trim! [1 3 5 7]      ; removes a # of elements based on std. dev.
print quantile! [3 6 9 12] ; pth quantile of the array (p is random)

;; Numerical functions
print twist! 1099         ; Seeds the RNG used by wrap!
print wrap! 10            ; Outputs a random array of n elements
print chain! 20           ; Chains a number of commands together
print coerce! mean! [1 2] ; Converts Rational -> Float; Float -> Int
